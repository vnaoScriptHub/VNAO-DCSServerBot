CREATE TABLE IF NOT EXISTS public.vnao_flightlogs(id uuid NOT NULL, player_ucid text COLLATE pg_catalog."default" NOT NULL, mission_id integer NOT NULL, server_name text COLLATE pg_catalog."default" NOT NULL, flight_time numeric, aircraft_type text COLLATE pg_catalog."default" NOT NULL, departure_field text COLLATE pg_catalog."default" NOT NULL, arrival_field text COLLATE pg_catalog."default" NOT NULL, coalition smallint NOT NULL, touch_downs smallint NOT NULL DEFAULT 0, dead smallint NOT NULL DEFAULT 0, crashed smallint NOT NULL DEFAULT 0, ejected smallint NOT NULL DEFAULT 0, air_start smallint NOT NULL DEFAULT 0, mission_end smallint NOT NULL DEFAULT 0, departure_timestamp timestamp without time zone NOT NULL, arrival_timestamp timestamp without time zone, CONSTRAINT vnao_flightlogs_pkey PRIMARY KEY (id)) TABLESPACE pg_default;
ALTER TABLE IF EXISTS public.vnao_flightlogs OWNER to dcsserverbot;
CREATE INDEX IF NOT EXISTS idx_flightlogs_id ON public.vnao_flightlogs USING btree (id ASC NULLS LAST) TABLESPACE pg_default;
CREATE TABLE IF NOT EXISTS public.vnao_lsogrades(id uuid NOT NULL DEFAULT 'gen_random_uuid()', flightlog_id uuid, player_ucid text COLLATE pg_catalog."default" NOT NULL, mission_id integer NOT NULL, server_name text COLLATE pg_catalog."default" NOT NULL, aircraft_type text COLLATE pg_catalog."default" NOT NULL, points numeric, grade text COLLATE pg_catalog."default" NOT NULL, details text COLLATE pg_catalog."default", wire smallint, case_num smallint NOT NULL, wind numeric NOT NULL DEFAULT 0, time_groove numeric, carrier_name text COLLATE pg_catalog."default", carrier_type text COLLATE pg_catalog."default", trapsheet json, mission_timestamp timestamp without time zone, server_timestamp timestamp without time zone NOT NULL DEFAULT 'now()', CONSTRAINT vnao_lsogrades_pkey PRIMARY KEY (id)) TABLESPACE pg_default;
ALTER TABLE IF EXISTS public.vnao_lsogrades OWNER to dcsserverbot;
CREATE INDEX IF NOT EXISTS idx_flightlog_id ON public.vnao_lsogrades USING btree(flightlog_id ASC NULLS LAST) TABLESPACE pg_default;
CREATE INDEX IF NOT EXISTS idx_lsogrades_id ON public.vnao_lsogrades USING btree(id ASC NULLS LAST) TABLESPACE pg_default;
CREATE TABLE IF NOT EXISTS public.vnao_bombboard(id integer NOT NULL DEFAULT 'nextval('vnao_bombboard_id_seq'::regclass)', mission_id integer NOT NULL, player_ucid text COLLATE pg_catalog."default" NOT NULL, unit_type text COLLATE pg_catalog."default" NOT NULL, points integer NOT NULL, quality text COLLATE pg_catalog."default" NOT NULL, weapon text COLLATE pg_catalog."default" NOT NULL, theatre text COLLATE pg_catalog."default" NOT NULL, range_name text COLLATE pg_catalog."default" NOT NULL, target_name text COLLATE pg_catalog."default" NOT NULL, distance numeric, radial numeric, heading numeric, velocity numeric, altitude numeric, bombsheet text COLLATE pg_catalog."default", clock text COLLATE pg_catalog."default", midate timestamp without time zone, "time" timestamp without time zone NOT NULL DEFAULT 'now()', CONSTRAINT vnao_bombboard_pkey PRIMARY KEY (id)) TABLESPACE pg_default;
ALTER TABLE IF EXISTS public.vnao_bombboard OWNER to dcsserverbot;
CREATE INDEX IF NOT EXISTS idx_bombboard_ucid ON public.vnao_bombboard USING btree(player_ucid COLLATE pg_catalog."default" ASC NULLS LAST) TABLESPACE pg_default;
CREATE TABLE IF NOT EXISTS public.vnao_strafeboard(id integer NOT NULL DEFAULT 'nextval('vnao_strafeboard_id_seq'::regclass)', mission_id integer NOT NULL, player_ucid text COLLATE pg_catalog."default" NOT NULL, unit_type text COLLATE pg_catalog."default" NOT NULL, points integer NOT NULL, quality text COLLATE pg_catalog."default" NOT NULL, theatre text COLLATE pg_catalog."default" NOT NULL, range_name text COLLATE pg_catalog."default" NOT NULL, target_name text COLLATE pg_catalog."default" NOT NULL, rounds_fired integer, rounds_hit integer, accuracy numeric, strafesheet text COLLATE pg_catalog."default", clock text COLLATE pg_catalog."default", midate timestamp without time zone, "time" timestamp without time zone NOT NULL DEFAULT 'now()', CONSTRAINT vnao_strafeboard_pkey PRIMARY KEY (id)) TABLESPACE pg_default;
ALTER TABLE IF EXISTS public.vnao_strafeboard OWNER to dcsserverbot;
CREATE INDEX IF NOT EXISTS idx_strafeboard_ucid ON public.vnao_strafeboard USING btree(player_ucid COLLATE pg_catalog."default" ASC NULLS LAST) TABLESPACE pg_default;
CREATE OR REPLACE VIEW public.v_flightlogs AS SELECT f.server_name, p.name, f.aircraft_type, f.flight_time, f.departure_field, f.arrival_field, f.touch_downs, f.dead, f.crashed, f.ejected, f.air_start, f.mission_end, f.arrival_timestamp FROM vnao_flightlogs f JOIN players p ON f.player_ucid = p.ucid ORDER BY f.arrival_timestamp DESC;
ALTER TABLE public.v_flightlogs OWNER TO dcsserverbot;
CREATE OR REPLACE VIEW public.v_lsogrades AS SELECT p.name, l.aircraft_type, l.server_name, l.points, l.grade, l.details, l.wire, l.case_num, l.wind, l.time_groove, l.carrier_name, l.server_timestamp FROM vnao_lsogrades l JOIN players p ON l.player_ucid = p.ucid ORDER BY l.server_timestamp DESC;
ALTER TABLE public.v_lsogrades OWNER TO dcsserverbot;
CREATE OR REPLACE VIEW public.v_lsogrades_with_id AS SELECT l.id, p.name, l.aircraft_type, l.server_name, l.points, l.grade, l.details, l.wire, l.case_num, l.wind, l.time_groove, l.carrier_name, l.server_timestamp FROM vnao_lsogrades l JOIN players p ON l.player_ucid = p.ucid ORDER BY l.server_timestamp DESC;
ALTER TABLE public.v_lsogrades_with_id OWNER TO postgres;
CREATE OR REPLACE FUNCTION public.greenie_board_data_squadron(server_name text, aircraft_type text, players_name text DEFAULT '%'::text, min_flight_time integer DEFAULT 0, return_limit integer DEFAULT 1000) RETURNS TABLE(player_name text, server_name text, flightlog_id text, aircraft_type text, case_num integer, points numeric, server_timestamp timestamp without time zone) LANGUAGE 'sql' COST 100 VOLATILE PARALLEL UNSAFE ROWS 1000 AS $BODY$ SELECT DISTINCT ON (vnao_flightlogs.id) players.name, missions.server_name AS server_name, vnao_flightlogs.id AS flightlog_id, vnao_lsogrades.aircraft_type, vnao_lsogrades.case_num, round(vnao_lsogrades.points, 1), min(vnao_lsogrades.server_timestamp) FROM vnao_lsogrades LEFT OUTER JOIN players ON players.ucid = vnao_lsogrades.player_ucid LEFT OUTER JOIN missions ON vnao_lsogrades.mission_id = missions.id LEFT OUTER JOIN vnao_flightlogs ON vnao_lsogrades.flightlog_id = vnao_flightlogs.id WHERE missions.server_name = $1 AND vnao_lsogrades.aircraft_type = $2 AND players.name like $3 AND vnao_flightlogs.flight_time > $4 AND extract(YEAR FROM vnao_lsogrades.server_timestamp) = extract(YEAR FROM now()) AND extract(MONTH FROM vnao_lsogrades.server_timestamp) = extract(MONTH FROM now()) AND vnao_lsogrades.grade <> 'WOFD' GROUP BY vnao_flightlogs.id, vnao_lsogrades.id, players.name, missions.server_name, vnao_lsogrades.aircraft_type, vnao_lsogrades.case_num, vnao_lsogrades.points LIMIT $5 $BODY$;
ALTER FUNCTION public.greenie_board_data_squadron(text, text, text, integer, integer) OWNER TO dcsserverbot;
CREATE OR REPLACE FUNCTION public.greenie_board_data_practice(server_name text, aircraft_type text, players_name text DEFAULT '%'::text, return_limit integer DEFAULT 1000) RETURNS TABLE(player_name text, server_name text, flightlog_id text, aircraft_type text, case_num integer, points numeric, server_timestamp timestamp without time zone) LANGUAGE 'sql' COST 100 VOLATILE PARALLEL UNSAFE ROWS 1000 AS $BODY$ SELECT DISTINCT ON (vnao_lsogrades.server_timestamp, vnao_lsogrades.id) players.name, missions.server_name AS server_name, vnao_flightlogs.id AS flightlog_id, vnao_lsogrades.aircraft_type, vnao_lsogrades.case_num, vnao_lsogrades.points, vnao_lsogrades.server_timestamp FROM vnao_lsogrades LEFT OUTER JOIN players ON players.ucid = vnao_lsogrades.player_ucid LEFT OUTER JOIN missions ON vnao_lsogrades.mission_id = missions.id LEFT OUTER JOIN vnao_flightlogs ON vnao_lsogrades.flightlog_id = vnao_flightlogs.id WHERE missions.server_name = $1 AND vnao_lsogrades.aircraft_type = $2 AND players.name like $3 AND extract(YEAR FROM vnao_lsogrades.server_timestamp) = extract(YEAR FROM now()) AND extract(MONTH FROM vnao_lsogrades.server_timestamp) = extract(MONTH FROM now()) AND vnao_lsogrades.grade <> 'WOFD' GROUP BY vnao_flightlogs.id, vnao_lsogrades.id, players.name, missions.server_name, vnao_lsogrades.aircraft_type, vnao_lsogrades.case_num, vnao_lsogrades.points ORDER BY vnao_lsogrades.server_timestamp DESC, vnao_lsogrades.id LIMIT $4 $BODY$;
ALTER FUNCTION public.greenie_board_data_practice(text, text, text, integer, integer) OWNER TO dcsserverbot;